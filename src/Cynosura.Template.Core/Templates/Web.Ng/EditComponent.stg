main(model) ::= <<
import { Component, Input, OnInit, Inject } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { Error } from '../core/error.model';
import { NoticeHelper } from '../core/notice.helper';
import { ConvertStringTo } from '../core/converter.helper';

import { $model.Entity.Name$ } from '../$model.Entity.NameKebab$-core/$model.Entity.NameKebab$.model';
import { $model.Entity.Name$Service } from '../$model.Entity.NameKebab$-core/$model.Entity.NameKebab$.service';

class DialogData {
    id: number;
}

@Component({
    selector: 'app-$model.Entity.NameKebab$-edit',
    templateUrl: './$model.Entity.NameKebab$-edit.component.html',
    styleUrls: ['./$model.Entity.NameKebab$-edit.component.scss']
})
export class $model.Entity.Name$EditComponent implements OnInit {
    id: $model.Entity.IdField.JsTypeName$;
    $model.Entity.NameLower$Form = this.fb.group({
        id: [],
$model.Entity.AllFields:field(); separator=",\n"$
    });
    $model.Entity.NameLower$: $model.Entity.Name$;
    error: Error;

    constructor(public dialogRef: MatDialogRef<$model.Entity.Name$EditComponent>,
                @Inject(MAT_DIALOG_DATA) public data: DialogData,
                private $model.Entity.NameLower$Service: $model.Entity.Name$Service,
                private fb: FormBuilder,
                private noticeHelper: NoticeHelper) {
        this.id = data.id;
    }

    ngOnInit(): void {
        this.get$model.Entity.Name$();
    }

    private async get$model.Entity.Name$() {
        if (!this.id) {
            this.$model.Entity.NameLower$ = new $model.Entity.Name$();
        } else {
            this.$model.Entity.NameLower$ = await this.$model.Entity.NameLower$Service.get$model.Entity.Name$({ id: this.id });
        }
        this.$model.Entity.NameLower$Form.patchValue(this.$model.Entity.NameLower$);
    }

    onSave(): void {
        this.save$model.Entity.Name$();
    }

    private async save$model.Entity.Name$() {
        try {
            if (this.id) {
                await this.$model.Entity.NameLower$Service.update$model.Entity.Name$(this.$model.Entity.NameLower$Form.value);
            } else {
                await this.$model.Entity.NameLower$Service.create$model.Entity.Name$(this.$model.Entity.NameLower$Form.value);
            }
            this.dialogRef.close(true);
        } catch (error) {
            this.onError(error);
        }
    }

    onError(error: Error) {
        this.error = error;
        if (error) {
            this.noticeHelper.showError(error);
            Error.setFormErrors(this.$model.Entity.NameLower$Form, error);
        }
    }
}

>>

field(field) ::= <<
$field:(field.Template)()$
>>

Type(field) ::= <<
        $field.NameLower$: []
>>

Entity(field) ::= <<
        $field.NameLower$$field.Entity.IdField.Name$: []
>>

Enum(field) ::= <<
        $field.NameLower$: []
>>