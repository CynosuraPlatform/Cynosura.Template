main(model) ::= <<
import { Component, OnInit } from '@angular/core';
import { PageEvent } from '@angular/material/paginator';
import { MatDialog } from '@angular/material/dialog';

import { ModalHelper } from '../core/modal.helper';
import { StoreService } from '../core/store.service';
import { Error } from '../core/error.model';
import { Page } from '../core/page.model';
import { NoticeHelper } from '../core/notice.helper';

import { $model.Entity.Name$ } from '../$model.Entity.NameKebab$-core/$model.Entity.NameKebab$.model';
import { $model.Entity.Name$Filter } from '../$model.Entity.NameKebab$-core/$model.Entity.NameKebab$-filter.model';
import { $model.Entity.Name$Service } from '../$model.Entity.NameKebab$-core/$model.Entity.NameKebab$.service';
import { $model.Entity.Name$EditComponent } from './$model.Entity.NameKebab$-edit.component';

class $model.Entity.Name$ListState {
    pageSize = 10;
    pageIndex = 0;
    filter = new $model.Entity.Name$Filter();
}

@Component({
    selector: 'app-$model.Entity.NameKebab$-list',
    templateUrl: './$model.Entity.NameKebab$-list.component.html',
    styleUrls: ['./$model.Entity.NameKebab$-list.component.scss']
})
export class $model.Entity.Name$ListComponent implements OnInit {
    content: Page<$model.Entity.Name$>;
    state: $model.Entity.Name$ListState;
    pageSizeOptions = [10, 20];
    columns = [
        $model.Entity.AllFields:field(); separator="\r\n"$
        'action'
    ];

    constructor(
        private dialog: MatDialog,
        private modalHelper: ModalHelper,
        private $model.Entity.NameLower$Service: $model.Entity.Name$Service,
        private storeService: StoreService,
        private noticeHelper: NoticeHelper
        ) {
        this.state = this.storeService.get('$model.Entity.NameLower$ListState', new $model.Entity.Name$ListState());
    }

    ngOnInit() {
        this.get$model.Entity.PluralName$();
    }

    private async get$model.Entity.PluralName$() {
        this.content = await this.$model.Entity.NameLower$Service.get$model.Entity.PluralName$({
            pageIndex: this.state.pageIndex,
            pageSize: this.state.pageSize,
            filter: this.state.filter
        });
    }

    onSearch() {
        this.get$model.Entity.PluralName$();
    }

    onReset() {
        this.state.filter.text = null;
        this.get$model.Entity.PluralName$();
    }

    onCreate() {
        this.openDialog(0).then((result) => {
            if (result) {
                this.get$model.Entity.PluralName$();
            }
        });
    }

    onEdit(id: number) {
        this.openDialog(id).then((result) => {
            if (result) {
                this.get$model.Entity.PluralName$();
            }
        });
    }

    onDelete($model.Entity.IdField.NameLower$: $model.Entity.IdField.JsTypeName$) {
        this.modalHelper.confirmDelete()
            .subscribe(async () => {
                try {
                    await this.$model.Entity.NameLower$Service.delete$model.Entity.Name$({ $model.Entity.IdField.NameLower$ });
                    this.get$model.Entity.PluralName$();
                } catch (error) {
                    this.onError(error);
                }
            });
    }

    private openDialog(id?: number): Promise<any> {
        const dialogRef = this.dialog.open($model.Entity.Name$EditComponent, {
            width: '600px',
            data: { id }
        });
        return dialogRef.afterClosed().toPromise();
    }

    onPage(page: PageEvent) {
        this.state.pageIndex = page.pageIndex;
        this.state.pageSize = page.pageSize;
        this.get$model.Entity.PluralName$();
    }

    onError(error: Error) {
        if (error) {
            this.noticeHelper.showError(error);
        }
    }
}

>>

field(field) ::= <<
'$field.NameLower$',
>>
